// function foo() {
//     console.log(arguments)
// }

// const foo2 = (...arguments) => {
//     console.log(arguments)
// }

// const company = {
//     name: "Media Solutions",
//     info: {
//         employees: ["Drozdova", "Denysiuk", "Pavlyk"],
//         partners: ["Kondratiuk LTD", "Rudnitska & Co", "Gontar Energy"]
//     }
// }

// const { 
//     name = "Unknown", 
//     info: { partners: [firstCompany, secondCompany] = [] } 
// } = company

// console.log(firstCompany, secondCompany)


// const arr = [1, 2, 3]

// const [num1, ...newArr] = arr

// const newArr2 = [...arr]

// console.log(newArr)

// function restSpred(a, b, c) {
//     console.log(a, b, c)
// }

// restSpred(...arr)

// function restSpred(...args) {
//     console.log(args)
// }

// restSpred(1, 2, 3)






/**
 * Example 1 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü–∏–∏
 * –ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:
 * createProduct(obj, callback) - 
 * –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞ –±–µ–∑ id, –∞ —Ç–∞–∫–∂–µ –∫–æ–ª–±–µ–∫. 
 * –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞—ë—Ç –æ–±—å–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞, 
 * –¥–æ–±–∞–≤–ª—è—è –µ–º—É —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤ —Å–≤–æ–π—Å—Ç–≤–æ id –∏ 
 * –≤—ã–∑—ã–≤–∞–µ—Ç –∫–æ–ª–±–µ–∫ –ø–µ—Ä–µ–¥–∞–≤–∞—è –µ–º—É —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—å–µ–∫—Ç.
 * 
 * logProduct(product) - –∫–æ–ª–ª–±–µ–∫ –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π –æ–±—å–µ–∫—Ç –ø—Ä–æ–¥—É–∫—Ç–∞ 
 * –∏ –ª–æ–≥–∏—Ä—É—é—â–∏–π –µ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å
 * logTotalPrice(product) - –∫–æ–ª–ª–±–µ–∫ –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π –æ–±—å–µ–∫—Ç –ø—Ä–æ–¥—É–∫—Ç–∞ 
 * –∏ –ª–æ–≥–∏—Ä—É—é—â–∏–π –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
 */

function createProduct(obj, callback) {
    const product = { id: Math.random(), ...obj }
    callback(product)
}

const p = { name: 'Apple', count: 4, price: 10 }

function logProduct(product) {
    console.log(product)
}

function logTotalPrice(product) {
    console.log(product.count * product.price)
}

// createProduct(p, logTotalPrice)



/**
 *  Example 2 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü–∏–∏
 * –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é each(array, callback), 
 * –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–≤—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –æ–∂–∏–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤, –∞ –≤—Ç–æ—Ä—ã–º - —Ñ—É–Ω–∫—Ü–∏—é, 
 * –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–º–µ–Ω–∏—Ç—Å—è –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –º–∞—Å—Å–∏–≤–∞. 
 * –§—É–Ω–∫—Ü–∏—è each –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, 
 * —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥—É—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–∑–æ–≤–∞ –∫–æ–ª–ª–±–µ–∫–∞.
 */


function each(arr, cb) {
    const newArr = []

    for (let i = 0; i < arr.length; i += 1) {
        const res = cb(arr[i], i)
        newArr.push(res)
    }

    return newArr
} 

// const eachRes1 = each([1,2,3], function (item, i) {
//     return `Iteration number: ${i}; Iteration value: ${item}`
// })

// const eachRes2 = each(['Denis', 'Max'], function (name, i) {
//     return `Hello ${name}`
// })

// console.log(eachRes2)

const users = [
    { name: 'Denis' },
    { name: 'Max' }
]

function handleUser(user) {
    return user.name
}

const usersNames = each(users, handleUser)

// console.log(usersNames)

/**
  * –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ Example 2 –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.
*/
const eachRes1 = each([1,2,3], (item, i) => `Iteration number: ${i}; Iteration value: ${item}`)
const eachRes2 = each(['Denis', 'Max'], (name, i) => `Hello ${name}`)



/**
 * Example 3 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü–∏–∏
 * –î–æ–±–∞–≤—å—Ç–µ –æ–±—ä–µ–∫—Ç—É account –º–µ—Ç–æ–¥—ã 
 * withdraw(amount, onSuccess, onError) –∏ 
 * deposit(amount, onSuccess, onError), 
 * –≥–¥–µ –ø–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä —ç—Ç–æ —Å—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏, –∞ –≤—Ç–æ—Ä–æ–π –∏ —Ç—Ä–µ—Ç–∏–π - –∫–æ–ª–±–µ–∫–∏.
 * –ú–µ—Ç–æ–¥ withdraw –≤—ã–∑—ã–≤–∞–µ—Ç onError –µ—Å–ª–∏ amount –±–æ–ª—å—à–µ 
 * TRANSACTION_LIMIT –∏–ª–∏ this.balance, 
 * –∏ onSuccess –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
 * –ú–µ—Ç–æ–¥ deposit –≤—ã–∑—ã–≤–∞–µ—Ç onError –µ—Å–ª–∏ amount –±–æ–ª—å—à–µ 
 * TRANSACTION_LIMIT –∏–ª–∏ –º–µ–Ω—å—à–µ –ª–∏–±–æ —Ä–∞–≤–µ–Ω –Ω—É–ª—é, 
 * –∏ onSuccess –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
 */

const TRANSACTION_LIMIT = 1000;

const account = {
  username: 'Jacob',
  balance: 400,
  deposit(amount, onSuccess, onError) {
    if (amount > TRANSACTION_LIMIT || amount === 0) {
        return onError('Error message')
    }

    account.balance += amount
    const { balance } = account
    onSuccess({ balance })
  },
  withdraw(amount, onSuccess, onError) {
    if (amount > TRANSACTION_LIMIT || amount > account.balance) {
        return onError('Error message')
    }

    account.balance -= amount
    const { balance } = account
    onSuccess({ balance })
  }
}
 
const onSuccessHandler = (currentBalance) => console.log('Success', currentBalance)
const onErrorHandler = (err) => console.log('Error', err)

// account.deposit(
//     100, 
//     onSuccessHandler, 
//     onErrorHandler
// )

// account.withdraw(
//     600,
//     onSuccessHandler,
//     onErrorHandler
// )

/**
 * Example 4 - –ú–µ—Ç–æ–¥ forEach
 * –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ forEach –∏ —Å—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.
 */

function logItems(items) {
    // console.log(items);
    // for (let i = 0; i < items.length; i += 1) {
    //     console.log(`${i + 1} - ${items[i]}`);
    // }
    items.forEach((item, i) => console.log(`${i + 1} - ${item}`))
}

logItems(['Mango', 'Poly', 'Ajax']);
logItems(['üçé', 'üçá', 'üçë', 'üçå', 'üçã']);